# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: spring_backend
    build:
      context: .
    ports:
      - 50000:50000
    environment:
      - token_secret_key=${token_secret_key}
      - paseto_footer=${paseto_footer}
      
      - redis_host=${redis_host}
      - redis_port=${redis_port}
      
      - postgres_username=${postgres_username}
      - postgres_password=${postgres_password}
      - postgres_sql_url=${postgres_sql_url}
      - postgres_host=${postgres_host}
      - postgres_port=${postgres_port}
      - postgres_db=${postgres_db}
      
      - TMDB_KEY=${TMDB_KEY}

      - python_endpoint=${python_endpoint}
    depends_on:
      db:
        condition: service_healthy
      redis:    
        condition: service_started
      python_service:
        condition: service_started
    networks:
      - backend_network

  db:
    image: postgres
    restart: always
    user: ${POSTGRES_USER}
    container_name: ${postgres_host}

    volumes:
      - db-data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d # Mount the init script correctly
    environment:
      - POSTGRES_DB=${postgres_db}
      - POSTGRES_PASSWORD=${postgres_password}
      # - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres || exit 1"]      
      interval: 10s
      timeout: 5s
      retries: 5  
      start_period: 60s  # Give it extra startup time
    networks:
      - backend_network

  redis:
    image: redis
    container_name: ${redis_host}
    restart: always
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network

  python_service:
    container_name: python_service
    command: sh -c "uvicorn app.main:app --host 0.0.0.0 --port 50001"
    build: 
      context: ./ai-model-python
      dockerfile: Dockerfile 
    environment:
      OLLAMA_URL: ${ollama_url}
    ports:
      - "50001:50001"
    networks:
      - backend_network

networks:
  backend_network:
    driver: bridge

volumes:
  db-data:


